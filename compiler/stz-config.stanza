;See License.txt for details about licensing.

defpackage stz/config :
  import core
  import collections
  import reader
  import parser
  import stz/params
  import stz/utils
  import stz/parsed-path

;============================================================
;============= Stanza Configuration File ====================
;============================================================
defstruct ConfigFile :
  path: String
  stmts: Tuple<ConfigStmt>

deftype ConfigStmt
defmulti info (s:ConfigStmt) -> FileInfo|False

defstruct PlatformStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  platform: Symbol
defstruct InstallDirStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  path: String with: (updater => sub-path)
defstruct PkgDirsStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  paths: Tuple<String> with: (updater => sub-paths)
defstruct ProjFilesStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  paths: Tuple<String> with: (updater => sub-paths)
defstruct MaxHeapSizeStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  size: Long
defstruct ExperimentalStmt <: ConfigStmt :
  info: FileInfo|False with: (as-method => true)
  value: True|False

;============================================================
;====================== Checker =============================
;============================================================

defn check! (f:ConfigFile) :
  ensure-no-duplicate-stmts!(f)
  for stmt in stmts(f) do :
    match(stmt) :
      (stmt:PlatformStmt) :
        if not supported-platform?(platform(stmt)) :
          throw(UnsupportedPlatform(info(stmt), platform(stmt)))
      (stmt:MaxHeapSizeStmt) :
        val default-size = current-heap-size()
        if size(stmt) < default-size :
          throw(InvalidMaxHeap(info(stmt), default-size))
      (stmt) : false

defn name (s:ConfigStmt) :
  match(s) :
    (s:PlatformStmt) : "platform"
    (s:InstallDirStmt) : "install-dir"
    (s:PkgDirsStmt) : "pkg-dirs"
    (s:ProjFilesStmt) : "proj-files"
    (s:MaxHeapSizeStmt) : "compiler-max-heap-size"
    (s:ExperimentalStmt) : "experimental"

defn ensure-no-duplicate-stmts! (f:ConfigFile) :
  for entry in group-by(name, stmts(f)) do :
    if length(value(entry)) > 1 :
      val s1 = value(entry)[1]
      val s2 = value(entry)[0]
      throw(DuplicateStmtError(info(s2), info(s1), name(s2)))

;============================================================
;============= Substitute Environment Variables =============
;============================================================

defn substitute-environment-variables (file:ConfigFile) -> ConfigFile :
  val stmts* = for s in stmts(file) map :
    defn sub (str:String) : substitute-env-vars(info(s), str)
    match(s) :
      (s:InstallDirStmt) : sub-path(s, sub(path(s)))
      (s:PkgDirsStmt) : sub-paths(s, map(sub, paths(s)))
      (s:ProjFilesStmt) : sub-paths(s, map(sub, paths(s)))
      (s) : s
  ConfigFile(path(file), stmts*)

;============================================================
;================ Resolve Relative Paths ====================
;============================================================

defn resolve-relative-paths (file:ConfigFile) -> ConfigFile :
  val config-dir = enclosing-dir(parse-path(path(file)))
  defn resolve (path:String) :
    to-string(relative-to-dir(config-dir, parse-path(path)))
  val stmts* = for s in stmts(file) map :
    match(s) :
      (s:InstallDirStmt) : sub-path(s, resolve(path(s)))
      (s:PkgDirsStmt) : sub-paths(s, map(resolve, paths(s)))
      (s:ProjFilesStmt) : sub-paths(s, map(resolve, paths(s)))
      (s) : s
  ConfigFile(path(file), stmts*)

;============================================================
;====================== Execute =============================
;============================================================

defn execute (file:ConfigFile) :
  for s in stmts(file) do :
    match(s) :
      (s:PlatformStmt) :
        OUTPUT-PLATFORM = platform(s)
      (s:InstallDirStmt) :
        STANZA-INSTALL-DIR = path(s)
      (s:PkgDirsStmt) :
        STANZA-PKG-DIRS = append(paths(s), STANZA-PKG-DIRS)
      (s:ProjFilesStmt) :
        add-all(STANZA-PROJ-FILES, paths(s))
      (s:MaxHeapSizeStmt) :
        STANZA-MAX-COMPILER-HEAP-SIZE = size(s)
      (s:ExperimentalStmt) :
        EXPERIMENTAL = value(s)

;============================================================
;================ Configuration Syntax ======================
;============================================================

defsyntax stanza-config :
  defn ut (x) : unwrap-token(x)

  defn PE (info:False|FileInfo, msg) :
    match(info) :
      (info:FileInfo) : Exception("%_: %_" % [info, msg])
      (info:False) : Exception(msg)

  defproduction sym: Symbol
  defrule sym = (?x) when ut(x) is Symbol : ut(x)
  
  defproduction string: String
  defrule string = (?x) when ut(x) is String : ut(x)

  defproduction string!: String
  defrule string! = (?s:#string) : s
  fail-if string! = () : PE(closest-info(), "Expected a string here.")

  defproduction long: Long
  defrule long = (?x) when ut(x) is Long : ut(x)

  defproduction long!: Long
  defrule long! = (?s:#long) : s
  fail-if long! = () : PE(closest-info(), "Expected a long here.")

  defproduction sym!: Symbol
  defrule sym! = (?s:#sym) : s
  fail-if sym! = () : PE(closest-info(), "Expected a symbol here.")

  defproduction bool! : True|False
  defrule bool! = (?v) when unwrap-token(v) is True|False : unwrap-token(v)
  fail-if bool! = () : PE(closest-info(), "Expected a bool here.")

  public defproduction stmt!: ConfigStmt
  defrule stmt! = (platform = ?p:#sym!) : PlatformStmt(closest-info(), p)
  defrule stmt! = (install-dir = ?path:#string!) : InstallDirStmt(closest-info(), path)
  defrule stmt! = (pkg-dirs = (?paths:#string! ...)) : PkgDirsStmt(closest-info(), to-tuple(paths))
  defrule stmt! = (proj-files = (?paths:#string! ...)) : ProjFilesStmt(closest-info(), to-tuple(paths))
  defrule stmt! = (compiler-max-heap-size = ?size:#long!) : MaxHeapSizeStmt(closest-info(), size)
  defrule stmt! = (experimental = ?b:#bool!) : ExperimentalStmt(closest-info(), b)
  fail-if stmt! = () : PE(closest-info(), "Invalid configuration rule.")

;============================================================
;=============== Read and Execute Config File ===============
;============================================================

defn read-and-execute-config-file (filename:String) :
  val stmts = parse-syntax[stanza-config / #stmt! ...](read-file(filename))
  val file = ConfigFile(filename, to-tuple(stmts))
  check!(file)
  execute $
  resolve-relative-paths $
  substitute-environment-variables $
  file

;============================================================
;================ Read Configuration File ===================
;============================================================

var STANZA-CONFIGURED? = false
public defn read-config-file () :
  if not STANZA-CONFIGURED? :
    ;Extract parameters from config file
    label break :
      defn extract-from-file (filename:String) :
        if file-exists?(filename) :
          read-and-execute-config-file(filename)
          break()

      defn extract-from-env (name:String) :
        match(get-env(name)) :
          (path:String) : extract-from-file(norm-path("%_/.stanza" % [path]))
          (path:False) : false

      extract-from-file(".stanza")
      extract-from-env("STANZA_CONFIG")
      extract-from-env("HOME")
      throw(Exception("Could not locate .stanza configuration file."))

    ;Verify parameters
    val license-file = norm-path("%_/License.txt" % [STANZA-INSTALL-DIR])
    if not file-exists?(license-file) :
      val msg = "Stanza install directory is set to %_, \
                 but could not locate license file at %_."
      throw $ Exception(msg % [STANZA-INSTALL-DIR, license-file])

    ;Set configured to true
    STANZA-CONFIGURED? = true

;============================================================
;============= Environment Variable Substitution ============
;============================================================
defn substitute-env-vars (info:FileInfo|False, s:String) -> String :
  within name = sub-curly(s) :
    match(get-env(name)) :
      (v:String) : v
      (f:False) : throw(EnvSubstitutionError(info,name))

defn sub-curly (f:String -> String, s:String) -> String :
  if index-of-char(s, '{') is False :
    s
  else :
    val buffer = StringBuffer()

    ;Iterate through the curlies
    let loop (start:Int = 0) :
      ;Determine curly bounds
      val [i, j] = let :
        val i = index-of-char(s, start to false, '{')
        match(i:Int) :
          [i, index-of-char(s, (i + 1) to false, '}')]
        else : [i, false]
      ;If there is a curly
      match(i:Int, j:Int) :
        ;Add string up to curly
        if start < i :
          add-all(buffer, s[start to i])
        ;Add replacement
        val replacement = f(s[(i + 1) through (j - 1)])
        add-all(buffer, replacement)
        ;Continue past } char
        loop(j + 1)
      else :
        ;End of string, add the rest
        if start < length(s) :
          add-all(buffer, s[start to false])

    ;Return spliced string
    to-string(buffer)

;============================================================
;====================== Errors ==============================
;============================================================

defstruct EnvSubstitutionError <: Exception :
  info:FileInfo|False
  name:String
  
defmethod print (o:OutputStream, e:EnvSubstitutionError) :
  val msg = "%_Could not determine value of environment variable %_."
  print(o, msg % [info-str(info(e)), name(e)])

defstruct DuplicateStmtError <: Exception :
  info:FileInfo|False
  prev-info:FileInfo|False
  name:String

defmethod print (o:OutputStream, e:DuplicateStmtError) :
  val prev-info-str = "" when prev-info(e) is False
                 else " Previous statement declared at %_." % [prev-info(e)]
  val msg = "%_Duplicate %_ statement in configuration file.%_"
  print(o, msg % [info-str(info(e)), name(e), prev-info-str])

defstruct UnsupportedPlatform <: Exception :
  info:FileInfo|False
  platform: Symbol

defmethod print (o:OutputStream, e:UnsupportedPlatform) :
  val msg = "%_%_ is not a supported platform."
  print(o, msg % [info-str(info(e)), platform(e)])

defstruct InvalidMaxHeap <: Exception :
  info:FileInfo|False
  default-size:Long

defmethod print (o:OutputStream, e:InvalidMaxHeap) :
  val msg = "%_Cannot set maximum heap size to be smaller than default heap size (%_)."
  print(o, msg % [info-str(info(e)), default-size(e)])

defn info-str (info:FileInfo|False) :
  "" when info is False else "%_: " % [info]
